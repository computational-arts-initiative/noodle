module Main___ where

import Prelude

import Control.Monad.Eff (Eff)
import Data.Foldable (fold)
import Data.Monoid (mempty)

data MyType a x
  = AA a
  | BB a
  | CC a x


instance showMyType :: (Show a, Show x) => Show (MyType a x) where
  show (AA x) = "AX" <> show x
  show (BB y) = "BY" <> show y
  show (CC x y) = "CXY" <> show x <> show y


instance showMyType :: (Show a) => Show (MyType a x) where
  show (AA a') = "AX" <> show a'
  show (BB a') = "BY" <> show a'
  show (CC a' y) = "CXY" <> show a'


main :: Eff (dom :: DOM) Unit
main =
    render $ fold
      [ p (text (show [ AA "aa", BB "bb" ]))
      ]
  where
    myText :: String
    myText = show (fold [ "aa", "bb" ])


main :: Eff (dom :: DOM) Unit
main =
    render $ fold
      [ p (text (show (factors 250)))
      ]
  where
    factors :: Int -> Array (Tuple Int Int)
    factors n = do
      a <- 1 .. n
      b <- 1 .. a
      guard $ a * b == n
      pure $ Tuple a b
