module Noodle.Test.Util.Trace
    ( channelsAfter
    , TraceItem(..)
    , (+>)
    ) where

import Prelude

import Data.Array (snoc)
import Data.Time.Duration (Milliseconds)
import Data.Tuple.Nested ((/\), type (/\))
import Data.Either (Either(..))

import Effect.Ref (Ref(..))
import Effect.Ref as Ref
import Effect (Effect)
import Effect.Class (liftEffect)
import Effect.Aff (Aff, delay)

import Test.Spec.Assertions (fail)

import FSM (runAndSubscribe) as Actions

import Noodle.Test.Util.Actions (getOrFail')
import Noodle.API.Action (Action(..), DataAction(..))
import Noodle.API.Action.Sequence (ActionList)
import Noodle.API.Action.Sequence (make) as Actions
import Noodle.Path as P
import Noodle.Toolkit as T
import Noodle.Network as R
import Noodle.Util (Canceler)


infixl 6 snoc as +>


data TraceItem d
  = InletData P.ToInlet d
  | OutletData P.ToOutlet d


type TracedFlow d = Array (TraceItem d)


instance showTraceItem :: Show d => Show (TraceItem d) where
    show (InletData iPath d) = show iPath <> " : " <> show d
    show (OutletData oPath d) = show oPath <> " : " <> show d


derive instance eqTraceItem :: Eq d => Eq (TraceItem d)


channelsAfter
  :: forall d c n
   . (Show d)
  => Milliseconds
  -> T.Toolkit d c n
  -> R.Network d c n
  -> ActionList d c n
  -> Aff (R.Network d c n /\ TracedFlow d)
channelsAfter period toolkit network actions = do
  target <- liftEffect $ Ref.new [] -- FIXME: rewrite with spies
  result /\ { stop } <- liftEffect $
    Actions.runAndSubscribe
        toolkit
        (\_ -> network)
        (handleAction target)
        actions
  network' <- getOrFail' result network
  delay period
  _ <- liftEffect stop
  vals <- liftEffect $ Ref.read target
  pure $ network' /\ vals
  where
    handleAction target (Data (GotInletData (R.Inlet _ path _ _) d)) = do
        curData <- Ref.read target
        Ref.write (curData +> InletData path d) target
        pure unit
    handleAction target (Data (GotOutletData (R.Outlet _ path _ _) d)) = do
        curData <- Ref.read target
        Ref.write (curData +> OutletData path d) target
        pure unit
    handleAction _ _ = pure unit
