module Example.Spork where

import Prelude

import Data.Const (Const)
import Effect (Effect)
import Noodle (NoodleError, Noodle, Network, emptyNetwork)
import Noodle (init) as Noodle
import Noodle.Render (Message(..)) as Ui
import Noodle.Render (update, once, Renderer, proxy') as Render
import Noodle.Render.Terminal (terminalRenderer)
import Noodle.Render.Terminal (view) as TerminalRenderer
import Spork.App (App)
import Spork.App as App
import Spork.Html (Html)
import Spork.Html as H
import Spork.Interpreter (never)


type Model d = Network d
type Action d = Ui.Message d


sporkRenderer :: forall d. Render.Renderer d (Html (Action d))
sporkRenderer =
  terminalRenderer
    # Render.proxy'
      (const $ H.div [] [])
      inject
      (H.div [] [])
  where
    inject :: (Ui.Message d -> Effect Unit) -> String -> Html (Action d)
    inject pushMsg strView =
      H.div [] []


render ∷ forall d. Model d → Html (Action d)
render nw =
  -- TODO: let view = TerminalRenderer.view nw
  -- TerminalRenderer.view
  H.div []
    [ H.button
        [ H.onClick (H.always_ Ui.Bang) ]
        [ H.text "Hit me" ]
    ]

update :: forall d. Model d -> Action d -> App.Transition Effect (Model d) (Action d)
update model action = do
  -- FIXME: we need to name separate effects (like `Connect` / `Disconnect` etc.) if we want to support Spork
  -- almost all of the actions on Noodle are effectful, but we're not marking them as such
  App.purely model
  -- Render.update action model >>= ...


init :: forall d. App.Transition Effect (Model d) (Action d)
init =
  { model: emptyNetwork "foo"
  , effects: mempty
  }

app ∷ forall d. App Effect (Const Void) (Model d) (Action d)
app =
  { render: render
  , update: update
  , subs: const mempty
  , init: init
  }


-- main ∷ Effect Unit
-- main = void $ App.makeWithSelector app "#app"
