module FS where

import Prelude (class Eq, class Ord, Unit, unit, ($), pure)
import Data.Map (Map)
import Data.Map as Map

import Effect (Effect)

foreign import kind FS

foreign import data File ∷ FS
foreign import data Dir ∷ FS
foreign import data Symlink ∷ FS

data UUID (i ∷ FS) = UUID String
data Item = File | Dir | Symlink

derive instance eqItem ∷ Eq Item
derive instance ordItem ∷ Ord Item

class FSItem i where
  reflectItem ∷ UUID i → Item

instance fsItemFile ∷ FSItem File where reflectItem _ = File
instance fsItemDir ∷ FSItem Dir where reflectItem _ = Dir
instance fsItemSymlink ∷ FSItem Symlink where reflectItem _ = Symlink

data Key = Key String Item

derive instance eqKey ∷ Eq Key
derive instance ordKey ∷ Ord Key

type Value = Int
type Storage = Map Key Value

insert ∷ UUID File → Int → Storage → Storage
insert u@(UUID id) v s = Map.insert (Key id (reflectItem u)) v s

file ∷ String → UUID File
file = UUID

dir ∷ String → UUID Dir
dir = UUID

-- main ∷ Effect Unit
-- main = do
--   let fs'= insert (file "123") 1 -- ok
--          $ insert (dir "123") 5  -- not ok
--          $ Map.empty
--   pure unit
