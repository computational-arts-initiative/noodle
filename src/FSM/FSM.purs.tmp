module FSM
    ( FSM(..) -- FIXME: do not expose constructor
    , prepare -- FIXME: do not expose
    , class DoNothing, doNothing
    , make, makePassing
    , run, run', run'', fold
    , pushAll, noSubscription
    ) where


import Prelude

import Effect (Effect)
import Effect.Ref as Ref
import Effect.Console as Console

import Data.List (List)
import Data.List as List
import Data.Foldable (class Foldable)
import Data.Tuple (fst)
import Data.Tuple.Nested ((/\), type (/\))
import Data.Either (Either)
import Data.Traversable (traverse_)
import Data.Foldable (foldr)


import FRP.Event (Event)
import FRP.Event as Event

import Rpd.Util (Canceler)


data FSM action model =
    -- TODO: try: (action -> model -> Effect (model /\ Array action))
    FSM (action -> model -> model /\ Effect action)
    -- Array -> Foldable & Applicative & Monoid


-- type FoldableFSM f action model = Foldable f => FSM (f action) model


class DoNothing a where
    doNothing :: a


-- TODO: See `Unfoldable`:
--  The generating function `f` in `unfoldr f` is understood as follows:
--
--  - If `f b` is `Nothing`, then `unfoldr f b` should be empty.
--  - If `f b` is `Just (Tuple a b1)`, then `unfoldr f b` should consist of `a`
--    appended to the result of `unfoldr f b1`.
--
class Batch a where
    -- batch :: forall f. Foldable f => f a -> a
    batch :: Array a -> a
    --break :: forall m. Monoid (m a) => a -> m a
    break :: a -> Array a -- should break actions recursively!


instance batchActionArray :: Batch action => Batch (Array action) where
    batch = identity
    break = identity


make
    :: forall action model
     . (action -> model -> model /\ Effect action)
    -> FSM action model
make = FSM


makePassing
    :: forall action model
     . DoNothing action
    => FSM action model
makePassing = FSM (\_ m -> m /\ pure doNothing)


noSubscription :: forall a. a -> Effect Unit
noSubscription = const $ pure unit


-- FIXME: change `Monoid` requirement to some custom typeclass (`IsAction`?)
--        since we break monoid laws: `mempty <> action != mempty.
--        maybe to something like `DoNothing` typeclass.


-- TODO: optionally, add `Batch` typeclass to work with returning multiple actions
--       it will require not only to allow joining two (or more?) actions but also
--       `Foldable` or be able to fold itself (Traverse?) using sequential calls
--       to `update`


{-
updateF (Pair actionA actionB) model =
    let
        model' /\ effects' = updateF actionA model
        model'' /\ effects'' = updateF actionB model'
    in
        model'' /\ (effects' <> effects'')
-}


-- TODO: add `NestFSM` to support placing actions inside other actions, like we do for GUI


prepare
    :: forall action model
     . DoNothing action
    => Batch action
    => FSM action model
    -> model
    -> (model -> Effect Unit) -- FIXME: use `update` itself for that?
    -> (action -> Effect Unit) -- FIXME: use `update` itself for that?
    -> Effect
            { pushAction :: action -> Effect Unit
            , stop :: Canceler
            }
prepare (FSM f) init subModels subActions = do
    { event : actions, push : pushAction } <- Event.create
    let
        (updates :: Event (model /\ Effect action)) =
            Event.fold
                (\action prev -> f action $ fst prev)
                actions
                (init /\ pure doNothing)
        (models :: Event model)
            = fst <$> updates
    stopModelSubscription <- Event.subscribe models subModels
    stopActionSubscription <- Event.subscribe actions subActions
    stopPerformingEffects <- Event.subscribe updates
        \(_ /\ eff) -> eff >>= pushAction
    pure
        { pushAction
        , stop : stopModelSubscription
              <> stopActionSubscription
              <> stopPerformingEffects
        }

run
    :: forall action model
     . DoNothing action
    => Batch action
    => FSM action model
    -> model
    -> action
    -> Effect
            { pushAction :: action -> Effect Unit
            , stop :: Canceler
            }
run fsm init = do
    run' fsm init noSubscription


run'
    :: forall action model
     . DoNothing action
    => Batch action
    => FSM action model
    -> model
    -> (model -> Effect Unit)
    -> action
    -> Effect
            { pushAction :: action -> Effect Unit
            , stop :: Canceler
            }
run' fsm init subscription = do
    run'' fsm init subscription noSubscription


run''
    :: forall action model
     . DoNothing action
    => Batch action
    => FSM action model
    -> model
    -> (model -> Effect Unit)
    -> (action -> Effect Unit)
    -> action
    -> Effect
            { pushAction :: action -> Effect Unit
            , stop :: Canceler
            }
run'' fsm init subModels subActions actionList = do
    { pushAction, stop } <- prepare fsm init subModels subActions
    _ <- traverse_ pushAction $ break actionList
    pure { pushAction, stop : stop }


fold
    :: forall action model f
     . DoNothing action
    => Batch action
    => FSM action model
    -> model
    -> action
    -> Effect
            (model /\
                { pushAction :: action -> Effect Unit
                 -- FIXME: not a lot of sense in returning `pushAction` here
                 ---       and may be `stop` as well
                , stop :: Canceler
            })
    -- -> Effect (model /\ Canceler)
fold fsm init actionList = do
    lastValRef <- Ref.new init
    { pushAction, stop } <- prepare fsm init (flip Ref.write lastValRef) noSubscription
    _ <- traverse_ pushAction $ break actionList
    lastVal <- Ref.read lastValRef
    pure $ lastVal /\ { pushAction, stop }
    -- fold' fsm init (const $ pure unit) actionList


{- fold'
    :: forall action model
     . Monoid action
    => FSM action model
    -> model
    -> (model -> Effect Unit)
    -> List action
    -> Effect (model /\ Canceler)
fold' fsm init subscription actionList = do
    lastValRef <- Ref.new init
    { pushAction, stop } <- prepare fsm init $ \model -> do
        _ <- lastValRef # Ref.write model
        _ <- subscription model
        pure unit
    _ <- traverse_ pushAction actionList
    lastVal <- Ref.read lastValRef
    pure $ lastVal /\ stop -}


pushAll :: forall action. (action -> Effect Unit) -> List action -> Effect Unit
pushAll = traverse_


foldActions :: forall action model
     . DoNothing action
    => Batch action
    => FSM action model
    -> model
    -> action
    -> model /\ Effect action
foldActions (FSM f) model action =
    foldr
        (\action (model' /\ effects') ->
            let
                model'' /\ effects'' = f action model'
            in
                model'' /\ (effects' <> effects'')
        )
        (model /\ pure doNothing)
        $ break action


-- Bifunctor?
-- nest
--     :: forall actionA modelA actionB modelB
--      . FSM actionA modelA
--     -> (actionA -> actionB)
--     -> (modelA -> modelB)
--     -> FSM actionB modelB
-- nest = unsafeCoerce
